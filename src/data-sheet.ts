class DataSheet {
	public readonly instructions: string[] = []
	public readonly opCodeBytes: Record<number, number> = {}
	public readonly opCodeMode: Record<number, string>  = {}
	public readonly opCodeName: Record<number, string>  = {}

	public readonly addressingModes: string[] = [
		'---',
		'IMM',
		'ZP',
		'ZPX',
		'ZPY',
		'ABS',
		'ABSX',
		'ABSY',
		'IND',
		'INDX',
		'INDY',
		'IMPL',
		'REL',
	]

	public readonly addressingModeBytes: Record<string, number> = {
		IMM : 2, // Immediate
		ZP  : 2, // Zero Page
		ZPX : 2, // X-Indexed Zero Page
		ZPY : 2, // Y-Indexed Zero Page
		ABS : 3, // Absolute
		ABSX: 3, // X-Indexed Absolute
		ABSY: 3, // Y-Indexed Absolute
		IND : 3, // Absolute Indirect
		INDX: 2, // X-Indexed Zero Page Indirect
		INDY: 2, // Zero Page Indirect Y-Indexed
		IMPL: 1, // Implied
		REL : 2, // Relative
	}

	public readonly Opcodes = [
		/* Name, IMM,  ZP,   ZPX,  ZPY,  ABS, ABSX, ABSY,  IND, INDX, INDY, IMPL, REL */
		['ADC', 0x69, 0x65, 0x75, null, 0x6D, 0x7D, 0x79, null, 0x61, 0x71, null, null],
		['AND', 0x29, 0x25, 0x35, null, 0x2D, 0x3D, 0x39, null, 0x21, 0x31, null, null],
		['ASL', null, 0x06, 0x16, null, 0x0E, 0x1E, null, null, null, null, 0x0A, null],
		['BIT', null, 0x24, null, null, 0x2C, null, null, null, null, null, null, null],
		['BPL', null, null, null, null, null, null, null, null, null, null, null, 0x10],
		['BMI', null, null, null, null, null, null, null, null, null, null, null, 0x30],
		['BVC', null, null, null, null, null, null, null, null, null, null, null, 0x50],
		['BVS', null, null, null, null, null, null, null, null, null, null, null, 0x70],
		['BCC', null, null, null, null, null, null, null, null, null, null, null, 0x90],
		['BCS', null, null, null, null, null, null, null, null, null, null, null, 0xB0],
		['BNE', null, null, null, null, null, null, null, null, null, null, null, 0xD0],
		['BEQ', null, null, null, null, null, null, null, null, null, null, null, 0xF0],
		['BRK', null, null, null, null, null, null, null, null, null, null, 0x00, null],
		['CMP', 0xC9, 0xC5, 0xD5, null, 0xCD, 0xDD, 0xD9, null, 0xC1, 0xD1, null, null],
		['CPX', 0xE0, 0xE4, null, null, 0xEC, null, null, null, null, null, null, null],
		['CPY', 0xC0, 0xC4, null, null, 0xCC, null, null, null, null, null, null, null],
		['DEC', null, 0xC6, 0xD6, null, 0xCE, 0xDE, null, null, null, null, null, null],
		['EOR', 0x49, 0x45, 0x55, null, 0x4D, 0x5D, 0x59, null, 0x41, 0x51, null, null],
		['CLC', null, null, null, null, null, null, null, null, null, null, 0x18, null],
		['SEC', null, null, null, null, null, null, null, null, null, null, 0x38, null],
		['CLI', null, null, null, null, null, null, null, null, null, null, 0x58, null],
		['SEI', null, null, null, null, null, null, null, null, null, null, 0x78, null],
		['CLV', null, null, null, null, null, null, null, null, null, null, 0xB8, null],
		['CLD', null, null, null, null, null, null, null, null, null, null, 0xD8, null],
		['SED', null, null, null, null, null, null, null, null, null, null, 0xF8, null],
		['INC', null, 0xE6, 0xF6, null, 0xEE, 0xFE, null, null, null, null, null, null],
		['JMP', null, null, null, null, 0x4C, null, null, 0x6C, null, null, null, null],
		['JSR', null, null, null, null, 0x20, null, null, null, null, null, null, null],
		['LDA', 0xA9, 0xA5, 0xB5, null, 0xAD, 0xBD, 0xB9, null, 0xA1, 0xB1, null, null],
		['LDX', 0xA2, 0xA6, null, 0xB6, 0xAE, null, 0xBE, null, null, null, null, null],
		['LDY', 0xA0, 0xA4, 0xB4, null, 0xAC, 0xBC, null, null, null, null, null, null],
		['LSR', null, 0x46, 0x56, null, 0x4E, 0x5E, null, null, null, null, 0x4A, null],
		['NOP', null, null, null, null, null, null, null, null, null, null, 0xEA, null],
		['ORA', 0x09, 0x05, 0x15, null, 0x0D, 0x1D, 0x19, null, 0x01, 0x11, null, null],
		['TAX', null, null, null, null, null, null, null, null, null, null, 0xAA, null],
		['TXA', null, null, null, null, null, null, null, null, null, null, 0x8A, null],
		['DEX', null, null, null, null, null, null, null, null, null, null, 0xCA, null],
		['INX', null, null, null, null, null, null, null, null, null, null, 0xE8, null],
		['TAY', null, null, null, null, null, null, null, null, null, null, 0xA8, null],
		['TYA', null, null, null, null, null, null, null, null, null, null, 0x98, null],
		['DEY', null, null, null, null, null, null, null, null, null, null, 0x88, null],
		['INY', null, null, null, null, null, null, null, null, null, null, 0xC8, null],
		['ROR', null, 0x66, 0x76, null, 0x6E, 0x7E, null, null, null, null, 0x6A, null],
		['ROL', null, 0x26, 0x36, null, 0x2E, 0x3E, null, null, null, null, 0x2A, null],
		['RTI', null, null, null, null, null, null, null, null, null, null, 0x40, null],
		['RTS', null, null, null, null, null, null, null, null, null, null, 0x60, null],
		['SBC', 0xE9, 0xE5, 0xF5, null, 0xED, 0xFD, 0xF9, null, 0xE1, 0xF1, null, null],
		['STA', null, 0x85, 0x95, null, 0x8D, 0x9D, 0x99, null, 0x81, 0x91, null, null],
		['TXS', null, null, null, null, null, null, null, null, null, null, 0x9A, null],
		['TSX', null, null, null, null, null, null, null, null, null, null, 0xBA, null],
		['PHA', null, null, null, null, null, null, null, null, null, null, 0x48, null],
		['PLA', null, null, null, null, null, null, null, null, null, null, 0x68, null],
		['PHP', null, null, null, null, null, null, null, null, null, null, 0x08, null],
		['PLP', null, null, null, null, null, null, null, null, null, null, 0x28, null],
		['STX', null, 0x86, null, 0x96, 0x8E, null, null, null, null, null, null, null],
		['STY', null, 0x84, 0x94, null, 0x8C, null, null, null, null, null, null, null],
		['WDM', 0x42, 0x42, null, null, null, null, null, null, null, null, null, null],
		['---', null, null, null, null, null, null, null, null, null, null, null, null],
	]

	public readonly instrDescription: Record<string, string> = {
		ADC: 'Add with Carry',
		AND: 'Logical AND',
		ASL: 'Arithmetic Shift Left',
		BCC: 'Branch if Carry Clear',
		BCS: 'Branch if Carry Set',
		BEQ: 'Branch if Equal',
		BIT: 'Bit Test',
		BMI: 'Branch if Minus',
		BNE: 'Branch if Not Equal',
		BPL: 'Branch if Plus',
		BRK: 'Force Interrupt',
		BVC: 'Branch if Overflow Clear',
		BVS: 'Branch if Overflow Set',
		CLC: 'Clear Carry Flag',
		CLD: 'Clear Decimal Mode',
		CLI: 'Clear Interrupt Disable',
		CLV: 'Clear Overflow Flag',
		CMP: 'Compare',
		CPX: 'Compare X Register',
		CPY: 'Compare Y Register',
		DEC: 'Decrement Memory',
		DEX: 'Decrement X Register',
		DEY: 'Decrement Y Register',
		EOR: 'Exclusive OR',
		INC: 'Increment Memory',
		INX: 'Increment X Register',
		INY: 'Increment Y Register',
		JMP: 'Jump',
		JSR: 'Jump to Subroutine',
		LDA: 'Load Accumulator',
		LDX: 'Load X Register',
		LDY: 'Load Y Register',
		LSR: 'Logical Shift Right',
		NOP: 'No Operation',
		ORA: 'Logical OR',
		PHA: 'Push Accumulator',
		PHP: 'Push Processor Status',
		PLA: 'Pull Accumulator',
		PLP: 'Pull Processor Status',
		ROL: 'Rotate Left',
		ROR: 'Rotate Right',
		RTI: 'Return from Interrupt',
		RTS: 'Return from Subroutine',
		SBC: 'Subtract with Carry',
		SEC: 'Set Carry Flag',
		SED: 'Set Decimal Flag',
		SEI: 'Set Interrupt Disable',
		STA: 'Store Accumulator',
		STX: 'Store X Register',
		STY: 'Store Y Register',
		TAX: 'Transfer Accumulator to X',
		TAY: 'Transfer Accumulator to Y',
		TSX: 'Transfer Stack Pointer to X',
		TXA: 'Transfer X to Accumulator',
		TXS: 'Transfer X to Stack Pointer',
		TYA: 'Transfer Y to Accumulator',
	}

	public readonly opCodeCycles: Record<number, number> = {
		0x00: 7,
		0x01: 6,
		0x05: 3,
		0x06: 5,
		0x08: 3,
		0x09: 2,
		0x0A: 2,
		0x0D: 4,
		0x0E: 6,
		0x10: 2,
		0x11: 5,
		0x15: 4,
		0x16: 6,
		0x18: 2,
		0x19: 4,
		0x1D: 4,
		0x1E: 7,
		0x20: 6,
		0x21: 6,
		0x24: 3,
		0x25: 3,
		0x26: 5,
		0x28: 4,
		0x29: 2,
		0x2A: 2,
		0x2C: 4,
		0x2D: 4,
		0x2E: 6,
		0x30: 2,
		0x31: 5,
		0x35: 4,
		0x36: 6,
		0x38: 2,
		0x39: 4,
		0x3D: 4,
		0x3E: 7,
		0x40: 6,
		0x41: 6,
		0x45: 3,
		0x46: 5,
		0x48: 3,
		0x49: 2,
		0x4A: 2,
		0x4C: 3,
		0x4D: 4,
		0x4E: 6,
		0x50: 2,
		0x51: 5,
		0x55: 4,
		0x56: 6,
		0x58: 2,
		0x59: 4,
		0x5D: 4,
		0x5E: 7,
		0x60: 6,
		0x61: 6,
		0x65: 3,
		0x66: 5,
		0x68: 4,
		0x69: 2,
		0x6A: 2,
		0x6C: 5,
		0x6D: 4,
		0x6E: 6,
		0x70: 2,
		0x71: 5,
		0x75: 4,
		0x76: 6,
		0x78: 2,
		0x79: 4,
		0x7D: 4,
		0x7E: 7,
		0x81: 6,
		0x84: 3,
		0x85: 3,
		0x86: 3,
		0x88: 2,
		0x8A: 2,
		0x8C: 4,
		0x8D: 4,
		0x8E: 4,
		0x90: 2,
		0x91: 6,
		0x94: 4,
		0x95: 4,
		0x96: 4,
		0x98: 2,
		0x99: 5,
		0x9A: 2,
		0x9D: 5,
		0xA0: 2,
		0xA1: 6,
		0xA2: 2,
		0xA4: 3,
		0xA5: 3,
		0xA6: 3,
		0xA8: 2,
		0xA9: 2,
		0xAA: 2,
		0xAC: 4,
		0xAD: 4,
		0xAE: 4,
		0xB0: 2,
		0xB1: 5,
		0xB4: 4,
		0xB5: 4,
		0xB6: 4,
		0xB8: 2,
		0xB9: 4,
		0xBA: 2,
		0xBC: 4,
		0xBD: 4,
		0xBE: 4,
		0xC0: 2,
		0xC1: 6,
		0xC4: 3,
		0xC5: 3,
		0xC6: 5,
		0xC8: 2,
		0xC9: 2,
		0xCA: 2,
		0xCC: 4,
		0xCD: 4,
		0xCE: 6,
		0xD0: 2,
		0xD1: 5,
		0xD5: 4,
		0xD6: 6,
		0xD8: 2,
		0xD9: 4,
		0xDD: 4,
		0xDE: 7,
		0xE0: 2,
		0xE1: 6,
		0xE4: 3,
		0xE5: 3,
		0xE6: 5,
		0xE8: 2,
		0xE9: 2,
		0xEA: 2,
		0xEC: 4,
		0xED: 4,
		0xEE: 6,
		0xF0: 2,
		0xF1: 5,
		0xF5: 4,
		0xF6: 6,
		0xF8: 2,
		0xF9: 4,
		0xFD: 4,
		0xFE: 7,
	}

	constructor() {
		this.Opcodes.forEach(rec => {
			if (typeof rec[0] === 'string' && rec[0] !== '---') {
				this.instructions.push(rec[0])
			}
			rec.forEach((opc, index) => {
				this.populateData(rec, opc, index)
			})
		})
	}

	private populateData(rec: any[], opc: string | number | null, index: number): void {
		if (typeof opc === 'number') {
			this.opCodeName[opc] = rec[0]
			const addressingMode = this.addressingModes[index]
			this.opCodeMode[opc] = addressingMode
			this.opCodeBytes[opc] = this.addressingModeBytes[addressingMode]
		}
	}

	public getOpc(instName: string, mode: string): number {
		const instIndex  = this.instructions.indexOf(instName)
		const instRecord = this.Opcodes[instIndex]
		const modeIndex  = this.addressingModes.indexOf(mode)
		return instRecord[modeIndex] as number
	}
}

module.exports.DataSheet = DataSheet
